name: Deploy Photo judge with Docker
env:
  SPRING_PROFILES_ACTIVE: "datasource-remote" # 设置 Spring Boot 的活动配置文件为 datasource-remote

on:
  push:
    branches: [main] # 当代码推送到 main 分支时触发
#  pull_request:
#    branches: [main] # 当有拉取请求合并到 main 分支时触发

jobs:
  deploy:
    runs-on: self-hosted  # 指定使用你配置的自托管运行器

    steps:
      # 第一步：获取仓库代码
      # 使用 actions/checkout@v3 Action 将你的 GitHub 仓库代码克隆到运行器上
      - name: Checkout code
        uses: actions/checkout@v3

      # 第二步：设置 Java 环境并启用 Maven 缓存
      # 使用 actions/setup-java@v3 Action 设置 JDK 17
      # with.cache: maven 会自动配置 Maven 依赖的缓存，减少重复下载
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # 推荐使用 Temurin OpenJDK 发行版
          cache: maven # 启用 Maven 依赖缓存

      # 第三步：构建 Spring Boot 项目
      # 在这一步执行 Maven 构建命令，生成可执行的 JAR 包
      # 如果 Maven 依赖已缓存，构建速度会显著加快
      - name: Build with Maven
        run: |
          ./mvnw clean package -DskipTests # 使用 Maven Wrapper 清理、打包项目并跳过测试

      # 第四步：构建 Docker 镜像
      # 使用项目根目录下的 Dockerfile 构建 Docker 镜像
      - name: Build Docker image
        run: |
          docker build -t photo-app:latest . # -t 标签镜像为 photo-app:latest

      # 第五步：停止并移除旧容器
      # 停止并删除名为 photo-app 的旧 Docker 容器，确保每次部署都是新的实例
      # || true 确保即使命令失败（例如容器不存在），工作流也能继续
      - name: Stop and remove old container
        run: |
          docker stop photo-app || true
          docker rm photo-app || true

      # 第六步：启动新的 Docker 容器
      # 以后台模式 (-d) 启动新的 photo-app 容器
      # --name 为容器指定名称，-p 8089:8089 将容器内部 8089 端口映射到宿主机 8089 端口
      # --add-host host.docker.internal:host-gateway 允许容器通过 host.docker.internal 访问宿主机
      - name: Run Docker container
        run: |
          docker run -d \
            --name photo-app \
            -p 8089:8089 \
            --add-host host.docker.internal:host-gateway \
            -e SPRING_PROFILES_ACTIVE=datasource-remote \
            photo-app:latest

      # 第七步：清理旧的悬挂 Docker 镜像
      # 这个步骤会删除服务器上所有没有被任何标签引用的旧 Docker 镜像，释放磁盘空间
      - name: Clean up old dangling Docker images
        run: |
          docker image prune -f # -f 强制执行，无需确认
